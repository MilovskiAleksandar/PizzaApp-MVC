using Microsoft.EntityFrameworkCore;
using SEDC.PizzaApp.Refactored.DataAccess.Interfaces;
using SEDC.PizzaApp.Refactored.Domain.Orders;
using SEDC.PizzaApp.Refactored.Shared.CustomExceptions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SEDC.PizzaApp.Refactored.DataAccess.EFImplementations
{
    public class EFOrderRepository : IRepository<Order>
    {
        private PizzaAppDbContext _dbContext;

        public EFOrderRepository(PizzaAppDbContext dbContext) //DEPENDENCY INJECTION
        {
            _dbContext = dbContext;
        }
        public void DeleteById(int id)
        {
            Order orderDb = _dbContext.Orders.FirstOrDefault(x => x.Id == id);
            if(orderDb == null)
            {
                throw new ResourceNotFoundException($"Order with id {id} was noit found in db.");
            }

            _dbContext.Orders.Remove(orderDb);
            _dbContext.SaveChanges(); //changes will be sent to DB
        }

        public List<Order> GetAll()
        {

            return _dbContext.Orders
                .Include(x => x.User) //join with table users
                .Include(x => x.PizzaOrders) //join with table PizzaOrder
                .ThenInclude(x => x.Pizza) //now join PizzaOrders with Pizzas
                .ToList();
        }

        public Order GetById(int id)
        {
            return _dbContext.Orders
                .Include(x => x.PizzaOrders)
                .ThenInclude(x => x.Pizza)
                .Include(x => x.User)
                .FirstOrDefault(x => x.Id == id);
        }

        public void Insert(Order entity)
        {
            //ids are generated by the db, bacause the Id columns are marked as Identity
            _dbContext.Orders.Add(entity); //still changes arent pushed in db
            _dbContext.SaveChanges();//changes will be sent to DB
        }

        public void Update(Order entity)
        {

            _dbContext.Orders.Update(entity);
            _dbContext.SaveChanges();
        }
    }
}
